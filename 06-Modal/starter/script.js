'use strict';

const modal = document.querySelector(`.modal`);
const overlay = document.querySelector(`.overlay`);
const btnCloseModal = document.querySelector(`.close-modal`);
const btnsOpenModal = document.querySelectorAll(`.show-modal`);

const openModal = function () {
  modal.classList.remove(`hidden`);
  overlay.classList.remove(`hidden`);
};

for (let i = 0; i < btnsOpenModal.length; i++) {
  btnsOpenModal[i].addEventListener(`click`, openModal);

  const closeModal = function () {
    modal.classList.add(`hidden`);
    overlay.classList.add(`hidden`);
  };

  btnCloseModal.addEventListener(`click`, closeModal);
  overlay.addEventListener(`click`, closeModal);

  document.addEventListener(`keydown`, function (e) {
    console.log(e.key);

    if (e.key === `Escape` && !modal.classList.contains(`hidden`)) {
      closeModal();
    }
  });
}
///////////////////////
/* Project 2: Modal Window
querySelector will only select the first element if the selector matches multiple elements, we must use querySelectorAll for multiple eleements with the same selector (class)
If you only have one line of code in a loop, you do not need the curly braces, although it is still good practice to use them.
*/

///////////////////////
/* Working with Classes
We don't have to use the . before the class name inside of the string unless we are selecting that class
    modal.classList.remove(`hidden`); doesn't need the . because we are only passing in the name of the class
    const btn = document.querySelector(`.overlay`); needs the . because we are selecting the class with the querySelector 

When executing a function on a click event with .addEventListener, you don't use parentheses after the function name because that would immediately call the function and we only want to call the function after the click event
    btnCloseModal.addEventListener(`click, closeModal);

When using the same function in multiple event listeners, you should declare that functions as a separate function and then add it to the arguments (without the parentheses) to be called after an event such as `click`
*/

////////////////////////
/* Handling an `Esc` Keypress Event
When a key is pressed, there is an object that is created that  logs which key was pressed. We can declare a function which takes an argument that the data generated by the key press will be stored to once a key is pressed.
    document.addEventListener(`keydown`, functioin (e){
        if (e.key === `Escape`){
            if(!modal.classList.contains(`hidden`)) {
                closeModal;
            }
        }
    });
 */

/////////////////////
/* Project 3: Pig Game

 */
